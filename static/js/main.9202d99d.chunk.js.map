{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Comment","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isAbusive","commentBody","textoReportar","props","body","react_default","a","createElement","className","src","route","alt","concat","author","onClick","_handleDelete","bind","href","_toggleAbuse","event","preventDefault","setState","deleteComment","Component","CommentBox","_this2","mostrarComentarios","comments","id","rutaImg","textoBoton","comentariosPo","_consumirComentarios","cifra","_evaluarComentarios","length","mostrarlos","_mostrarLista","App_CommentForm","addComment","_addComment","_clickLista","elAuthor","elBody","comment","lenght","i","splice","forceUpdate","losComents","mostrar","tamanio","undefined","_this3","map","elemento","App_Comment","_deleteComment","CommentForm","_this4","characters","_this5","onSubmit","_handleSubmit","placeholder","ref","input","_author","maxlength","onKeyUp","_contadorDeCaracteres","textarea","_body","type","value","alert","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9202d99d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\n\n/* LLa modificación de los atributos del objeto state de cada componente se realiza siempre\n   en un método, ese método se llama en un botón o en un link\n   \n   En el componente Comment, pongo los condicionales dentro del render.\n   En el componente CommentBox pongo los condicionales en un método y le paso\n   los argumentos que necesite\n*/\nclass Comment extends Component {\n\n  constructor () {\n    super();\n\n    this.state = {isAbusive: false} \n\n  }\n\n  render() {\n\n    let commentBody;\n    var textoReportar;\n\n    if (this.state.isAbusive===false) {\n\n      commentBody = this.props.body;\n      textoReportar = \"Reportar Comentario\";\n\n    } else {\n\n      commentBody = <em>Contenido marcado como abusivo</em>\n      textoReportar = \"Deshacer\";\n\n    }\n\n   return (\n\n    <div className=\"comment\">\n       \n      <img src={this.props.route} alt={`${this.props.author}'s imagen`}/> \n      <p className=\"comment-header\">{this.props.author}</p>\n      <p className=\"comment-body\">{commentBody}</p>\n\n      <div className=\"comment-actions\">\n        <a onClick={this._handleDelete.bind(this)} href=\"#\">Delete comment</a>\n        <br/>\n        <a onClick={this._toggleAbuse.bind(this)} href=\"#\">{textoReportar}</a>\n      </div>\n\n\n    </div>\n\n   );\n\n  }\n\n  _toggleAbuse (event){\n    event.preventDefault(); //previene que la página se recargue cuando das click en un link\n\n    this.setState({isAbusive: !this.state.isAbusive});\n\n  }\n   \n  _handleDelete (event){\n\n    event.preventDefault();\n\n\n\n    this.props.deleteComment(this.props.body);\n\n  }\n\n  }\n  \nclass CommentBox extends Component {\n\n  constructor () {\n    super();\n\n    this.state = {mostrarComentarios: true,\n                  comments: [\n\n                    {id: 1, author: \"Anne Droid\", body: \"I wanna know what love is\", rutaImg:'./prueba/5.png'  },\n                    {id: 2, author: \"Io easy\", body: \"I know you can show me\" , rutaImg:\"./prueba/4.png\"},\n                    {id: 3, author: \"Ilian\", body: \"Par de maricas\" , rutaImg:\"./prueba/3.png\"}  \n\n                  ]};\n\n  }\n\n  render () {\n   \n    const comentariosPo = this._consumirComentarios ();\n    const cifra = this._evaluarComentarios(comentariosPo.length);\n    const mostrarlos = this._mostrarLista(comentariosPo,this.state.mostrarComentarios);\n    var textoBoton;\n\n    if (this.state.mostrarComentarios===true){\n      textoBoton = \"Ocultar Comentarios\";\n    } else {\n      textoBoton = \"Mostrar Comentarios\";\n    }\n\n    return (\n  \n      <div className=\"comment-box\">\n         <CommentForm addComment={this._addComment.bind(this)}/>\n         <button className=\"myButton\" onClick={this._clickLista.bind(this)}>{textoBoton}</button>\n         <h3>Comments</h3>\n         <h4>{cifra} </h4>\n         {mostrarlos}\n\n      </div>\n  \n    );\n  \n  }\n\n  //este método se dispara por CommentForm cuando un nuevo comentario es añadido\n\n  _addComment (elAuthor, elBody) {\n\n    const comment = {id: this.state.comments.lenght +1,\n                     rutaImg:\"./cero.png\",\n                     author:elAuthor,\n                     body:elBody};\n\n    this.setState({comments: this.state.comments.concat([comment])});\n\n  }\n\n  _deleteComment (body) {\n\n\n    for (var i = 0; i < this.state.comments.length; i++){\n\n      if (this.state.comments[i].body == body) {\n\n        this.state.comments.splice(i,1);\n        this.forceUpdate();\n\n     \n      \n      }\n\n    }\n    \n      \n  }\n\n  _mostrarLista (losComents,mostrar){\n\n    if (mostrar){\n\n      return <div className=\"comment-list\">{losComents}</div>;\n\n    } \n\n  }\n\n  _clickLista () {\n\n    this.setState ({\n      mostrarComentarios: !this.state.mostrarComentarios\n    });\n\n  }\n\n  _evaluarComentarios (tamanio) {\n     \n     if (tamanio== undefined){\n       return \"no puedo leer esto\"\n     }\n    \n      if (tamanio===0){\n        return \"No comments yet\";\n      } else if (tamanio===1) {\n        return \"1 comment\"\n      }else {\n        return `there's ${tamanio} comments`;\n      }\n  }\n\n  _consumirComentarios () {\n\n\n   return this.state.comments.map((elemento) => <Comment deleteComment={this._deleteComment.bind(this)} author={elemento.author} body={elemento.body} id={elemento.id} route={elemento.rutaImg}/>);\n                                                \n  }\n\n  }\n\n/*  commentForm es un componente que tiene un formulario de inputs de usuario.\n\n    Cuando el botón de submit es tocado, los datos de ese formulario pueden\n    ser accedidos gracias al ref en el método  _handleSubmit que a su vez\n    llama al método _addComment de la clase padre CommentBox y en la misma\n    linea lo convierte en un atributo para su propio componente, es decir <CommentForm addComment =.../>\n\n    Cuando el método _addComment de la clase padre es llamado y ejecutado en la clase hija, esta\n    indirectamente edita el objeto state de la clase padre.\n\n*/\n\nclass CommentForm extends Component {\n\n  constructor () {\n    super ();\n\n    this.state = {\n      characters: 0\n    } \n\n  }\n\n  // en cada input del form, se genera un método en el campo \"ref\" que usa react para enviar información de inputs a variables globales\n\n  render () {\n    return (\n\n      <form className=\"comment-form\" onSubmit={this._handleSubmit.bind(this)}>\n        <h3>Join The Discussion</h3>\n        <div className=\"comment-form-fields\">\n          <input className=\"areas\" placeholder=\"Name:\" ref={(input) => this._author = input}/>\n          <br/>\n          <textarea maxlength=\"140\" onKeyUp={this._contadorDeCaracteres.bind(this)} className=\"areas\" placeholder=\"Comment:\" ref={(textarea) => this._body = textarea}></textarea>\n          <p>{\"Caracteres restantes: \" + (-this.state.characters+140)}</p>\n        </div>\n        <div className=\"comment-form-actions\">\n          <button className=\"myButton2\" type=\"submit\">Post Comment</button>\n        </div>\n\n      </form>\n\n    );\n  }\n\n  // en el siguiente método adquiero la información de los inputs y las guardo en variables\n  // luego llamo un método de mi padre y le doy como argumento los valores de dichos inputs\n\n  _handleSubmit (event){\n\n    event.preventDefault();\n    let author = this._author;\n    let body = this._body;\n\n\n    if (!author.value || !body.value ) {\n\n      alert (\"No se permiten espacios vacíos\");\n\n    } else {\n\n      this.props.addComment (author.value, body.value); //addComment hace referencia a un método propiedad de CommentBox.\n  \n    }\n\n    \n\n  }\n\n  _contadorDeCaracteres () {\n\n   this.setState({characters: this._body.value.length}); \n\n  }\n\n  }\n\nexport default CommentBox;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}